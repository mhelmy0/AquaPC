# RTP Video Streaming Client Configuration

# Stream settings
stream:
  source_ip: "192.168.100.41"  # Raspberry Pi server IP
  rtp_port: 5000               # RTP streaming port
  protocol: "rtp"              # Protocol type
  codec: "h264"                # Video codec
  sdp_file: null               # Path to SDP file (optional, null for direct RTP)

  # SDP (Session Description Protocol) content
  # Used when connecting via SDP instead of direct RTP URL
  # Leave empty to use direct RTP connection
  sdp_content: |
    v=0
    o=- 0 0 IN IP4 127.0.0.1
    s=Raspberry Pi Camera Stream
    c=IN IP4 0.0.0.0
    t=0 0
    m=video 5000 RTP/AVP 96
    a=rtpmap:96 H264/90000
    a=fmtp:96 packetization-mode=1

# Display settings
display:
  window_title: "AquaCam Live Stream"
  # width: 1920                  # Display window width (UPDATED to match stream)
  # height: 1080                 # Display window height (UPDATED to match stream)
  width: 1280                  # Display window width (UPDATED to match stream)
  height: 720                 # Display window height (UPDATED to match stream)
  show_fps: true               # Show FPS counter
  show_bitrate: false          # Show bitrate (experimental)
  fullscreen: false            # Start in fullscreen mode

# Recording settings
recording:
  output_dir: "./recordings"   # Output directory for recordings
  format: "mp4"                # Output format: mp4, mkv, avi
  codec: "h264"                # Codec: h264, copy (no re-encode)
  filename_pattern: "recording_%Y%m%d_%H%M%S"  # Timestamp pattern
  fps: 20                      # Recording frame rate

# Snapshot settings
snapshot:
  output_dir: "./snapshots"    # Output directory for snapshots
  format: "jpg"                # Image format: jpg, png
  quality: 95                  # JPEG quality (0-100)
  filename_pattern: "snapshot_%Y%m%d_%H%M%S"  # Timestamp pattern

# Advanced settings
advanced:
  # Performance mode: "low_latency", "balanced", or "high_quality"
  # - low_latency: Minimal delay (~0.5-1s), small buffers, aggressive frame dropping, GPU decode
  # - balanced: Moderate delay (~3-5s), medium buffers, some frame dropping
  # - high_quality: Higher delay (~10-20s), large buffers, minimal frame dropping
  # Set to null to use custom settings below
  performance_mode: null

  # Custom Ultra-Low Latency Configuration (400ms target, minimal drops)
  # These settings override performance_mode when it's set to null
  auto_buffer_sizing: false    # Use fixed buffers for precise control
  buffer_size: 12              # 12 frames @ 30fps = 400ms latency
  frame_drop_threshold: 15     # Start dropping when queue > 15 (allows some buffering)
  max_ram_usage_percent: 10    # Minimal RAM usage
  recording_queue_size: 60     # 2 seconds for recording buffer

  # Hardware acceleration (recommended for low latency)
  hw_accel: "auto"             # Hardware acceleration: "auto", "cuda", "dxva2", "qsv", "none"

  ffmpeg_path: "ffmpeg"        # Path to FFmpeg executable (or just "ffmpeg" if in PATH)
  log_level: "INFO"            # Logging level: DEBUG, INFO, WARNING, ERROR

  # Stream reliability settings
  stream_timeout: 10.0         # Seconds before declaring stream dead (increased for stability)
  stream_health_check_interval: 2.0  # Seconds between health checks

  # Reconnection settings
  auto_reconnect: true         # Enable automatic reconnection
  reconnect_interval: 5        # Seconds between reconnection attempts
  max_reconnect_attempts: 10   # 0 = infinite, 10 = give up after 10 tries

  # Recording settings
  recording_async: true        # Use async recording (prevents blocking)
  recording_queue_size: 60     # Frames to buffer for async recording (2s @ 30fps, overridden by custom setting above)

  # Packet loss / Network resilience settings
  ignore_decode_errors: true   # Continue on H.264 decode errors (packet loss)
  udp_buffer_size: 65536       # UDP receive buffer size in bytes (used when auto_buffer_sizing is false)
