{
  "permissions": {
    "allow": [
      "Bash(python -c \"import yaml; config = yaml.safe_load(open(''config.yaml'')); print(f\"\"Config value: {config[''advanced''].get(''recording_queue_size'')}\"\")\")",
      "Bash(python -c \"from src.config import ConfigManager; c = ConfigManager(''config.yaml''); print(''=== FINAL ULTRA-LOW LATENCY CONFIGURATION ===''); print(); print(''TARGET: 400ms latency with minimal frame drops''); print(); print(''Configuration:''); print(f''  Frame Buffer:        {c.get_buffer_size()} frames''); print(f''  Frame Drop Threshold: {c.get(\"\"advanced\"\", \"\"frame_drop_threshold\"\")} frames''); print(f''  Recording Queue:     {c.get_recording_queue_size()} frames''); print(f''  GPU Acceleration:    {c.get(\"\"advanced\"\", \"\"hw_accel\"\")}''); print(); latency_ms = c.get_buffer_size() / 30.0 * 1000; rec_buffer_sec = c.get_recording_queue_size() / 30.0; print(''Calculated Performance:''); print(f''  Expected Latency:    ~{latency_ms:.0f}ms ({latency_ms/1000:.1f}s)''); print(f''  Recording Buffer:    {rec_buffer_sec:.1f}s''); print(f''  Drop Overhead:       {c.get(\"\"advanced\"\", \"\"frame_drop_threshold\"\") - c.get_buffer_size()} frames''); print(); print(''Comparison to Previous Modes:''); print(''  vs 100ms mode:    4x more buffer, fewer drops''); print(''  vs Balanced (3s): 7.5x lower latency''); print(''  vs Old (17s):     42x lower latency!''); print(); print(''Expected Behavior:''); print(''  ✓ Real-time with <500ms delay''); print(''  ✓ Minimal frame drops (15 frame threshold)''); print(''  ✓ Handles network bursts (3 frame overhead)''); print(''  ✓ GPU hardware acceleration''); print(''  ✓ 2 second recording buffer'')\")"
    ],
    "deny": [],
    "ask": []
  }
}
